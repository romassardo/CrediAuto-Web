generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums basados en columnas ENUM de MySQL
enum DealerStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SUSPENDED
}

enum UserRole {
  ADMIN
  DEALER
  EJECUTIVO_CUENTAS
}

enum UserStatus {
  PENDING
  INVITED
  ACTIVE
  SUSPENDED
}

enum LoanApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

// Modelo dealers
model Dealer {
  id                 Int           @id @default(autoincrement())
  publicId           String        @unique @db.Char(36)
  legalName          String?       @db.VarChar(255)
  tradeName          String        @db.VarChar(255)
  cuit               String?       @unique @db.VarChar(20)
  email              String?       @db.VarChar(255)
  phone              String?       @db.VarChar(50)
  addressStreet      String?       @db.VarChar(255)
  addressCity        String?       @db.VarChar(120)
  addressProvince    String?       @db.VarChar(120)
  postalCode         String?       @db.VarChar(20)
  status             DealerStatus  @default(PENDING_APPROVAL)
  approvedAt         DateTime?
  approvedByUserId   Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?

  // Relaciones
  approvedByUser     User?         @relation("DealerApprovedByUser", fields: [approvedByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  users              User[]
  loanApplications   LoanApplication[]

  @@index([status], name: "idx_dealers_status")
  @@index([approvedByUserId], name: "idx_dealers_approvedByUserId")
  @@map("dealers")
}

// Modelo users
model User {
  id                    Int                   @id @default(autoincrement())
  publicId              String                @unique @db.Char(36)
  email                 String                @unique @db.VarChar(255)
  firstName             String                @db.VarChar(120)
  lastName              String                @db.VarChar(120)
  phone                 String?               @db.VarChar(50)
  passwordHash          String?               @db.VarChar(255)
  role                  UserRole              @default(DEALER)
  status                UserStatus            @default(PENDING)
  dealerId              Int?
  lastLoginAt           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?

  // Relaciones
  dealer                Dealer?               @relation(fields: [dealerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  approvedDealers       Dealer[]              @relation("DealerApprovedByUser")
  refreshTokens         RefreshToken[]
  passwordResetTokens   PasswordResetToken[]
  auditLogs             AuditLog[]            @relation("AuditActor")
  submittedLoanApplications LoanApplication[] @relation("LoanSubmittedBy")
  reviewedLoanApplications  LoanApplication[] @relation("LoanReviewedBy")
  executiveLoanApplications LoanApplication[] @relation("LoanExecutive")
  createdRateRanges     InterestRateRange[]  @relation("RateRangeCreatedBy")

  @@index([dealerId], name: "idx_users_dealerId")
  @@index([status], name: "idx_users_status")
  @@map("users")
}

// Modelo audit_log
model AuditLog {
  id           Int       @id @default(autoincrement())
  actorUserId  Int?
  action       String    @db.VarChar(100)
  entityType   String    @db.VarChar(100)
  entityId     String    @db.VarChar(100)
  metadata     Json?
  ip           String?   @db.VarChar(45)
  createdAt    DateTime  @default(now())

  // Relaciones
  actorUser    User?     @relation("AuditActor", fields: [actorUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([entityType, entityId], name: "idx_audit_entity")
  @@index([actorUserId], name: "idx_audit_actor")
  @@index([createdAt], name: "idx_audit_createdAt")
  @@map("audit_log")
}

// Modelo refresh_tokens
model RefreshToken {
  id                 Int             @id @default(autoincrement())
  userId             Int
  tokenHash          String          @unique @db.VarChar(128)
  expiresAt          DateTime
  revokedAt          DateTime?
  replacedByTokenId  Int?
  userAgent          String?         @db.VarChar(255)
  ip                 String?         @db.VarChar(45)
  createdAt          DateTime        @default(now())

  // Relaciones
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replacedBy         RefreshToken?   @relation("RefreshReplacement", fields: [replacedByTokenId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  replaces           RefreshToken[]  @relation("RefreshReplacement")

  @@index([userId, revokedAt], name: "idx_refresh_user_revoked")
  @@index([expiresAt], name: "idx_refresh_expiresAt")
  @@map("refresh_tokens")
}

// Modelo password_reset_tokens
model PasswordResetToken {
  id          Int       @id @default(autoincrement())
  userId      Int
  tokenHash   String    @unique @db.VarChar(128)
  expiresAt   DateTime
  consumedAt  DateTime?
  createdAt   DateTime  @default(now())

  // Relaciones
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], name: "idx_prt_user")
  @@index([expiresAt], name: "idx_prt_expiresAt")
  @@map("password_reset_tokens")
}

// Enums adicionales para loan applications
enum MaritalStatus {
  soltero
  casado
  divorciado
  viudo
  union_convivencial
}

enum VehicleCondition {
  nuevo
  usado
}

// Modelo para rangos de tasas por años del vehículo
model InterestRateRange {
  id                    Int       @id @default(autoincrement())
  name                  String    @db.VarChar(100)        // Ej: "Vehículos 2005-2015"
  description           String?   @db.VarChar(255)        // Descripción del rango
  yearFrom              Int                               // Año desde (inclusive)
  yearTo                Int                               // Año hasta (inclusive)
  interestRate          Decimal   @db.Decimal(5,4)        // Tasa de interés anual (ej: 0.4500 = 45%)
  isActive              Boolean   @default(true)          // Si el rango está activo
  priority              Int       @default(0)             // Prioridad para casos de solapamiento
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdByUserId       Int?
  
  // Relación con el usuario que creó/modificó
  createdByUser         User?     @relation("RateRangeCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  @@index([yearFrom, yearTo], name: "idx_rate_range_years")
  @@index([isActive], name: "idx_rate_range_active")
  @@index([priority], name: "idx_rate_range_priority")
  @@map("interest_rate_ranges")
}

// Modelo loan_applications
model LoanApplication {
  id                    Int                   @id @default(autoincrement())
  publicId              String                @unique @db.Char(36)
  
  // Relaciones
  dealerId              Int
  executiveId           Int?
  submittedByUserId     Int
  
  // Datos Personales del Solicitante
  applicantFirstName    String                @db.VarChar(100)
  applicantLastName     String                @db.VarChar(100)
  applicantCuil         String                @db.VarChar(15)
  applicantEmail        String                @db.VarChar(255)
  applicantPhone        String                @db.VarChar(50)
  applicantBirthDate    DateTime?             @db.Date
  applicantAddress      String?               @db.VarChar(255)
  applicantCity         String?               @db.VarChar(100)
  applicantProvince     String?               @db.VarChar(100)
  applicantPostalCode   String?               @db.VarChar(20)
  applicantMaritalStatus MaritalStatus?
  
  // Datos del Cónyuge (opcional)
  spouseFirstName       String?               @db.VarChar(100)
  spouseLastName        String?               @db.VarChar(100)
  spouseCuil            String?               @db.VarChar(15)
  
  // Datos Laborales
  employmentType        String?               @db.VarChar(100)
  employmentTypeOther   String?               @db.VarChar(255)
  companyName           String?               @db.VarChar(255)
  companyPhone          String?               @db.VarChar(50)
  workExperience        String?               @db.VarChar(100)
  
  // Datos del Vehículo
  vehicleCondition      VehicleCondition?
  vehicleBrand          String?               @db.VarChar(100)
  vehicleModel          String?               @db.VarChar(100)
  vehicleYear           Int?
  vehicleVersion        String?               @db.VarChar(255)
  
  // Cálculos del Préstamo
  vehiclePrice          Decimal               @db.Decimal(12,2)
  loanAmount            Decimal               @db.Decimal(12,2)
  downPayment           Decimal               @db.Decimal(12,2)
  loanTermMonths        Int
  monthlyPayment        Decimal               @db.Decimal(10,2)
  totalAmount           Decimal               @db.Decimal(12,2)
  interestRate          Decimal               @db.Decimal(5,4)
  cftAnnual             Decimal               @db.Decimal(5,4)
  
  // Documentos (JSON con metadata)
  documentsMetadata     Json?
  
  // Estado y Procesamiento
  status                LoanApplicationStatus @default(PENDING)
  statusReason          String?               @db.Text
  reviewedAt            DateTime?
  reviewedByUserId      Int?
  
  // Metadatos
  submissionData        Json?                 // Datos completos del formulario
  calculationData       Json?                 // Datos completos del cálculo
  
  // Timestamps
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  
  // Relaciones
  dealer                Dealer                @relation(fields: [dealerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  executive             User?                 @relation("LoanExecutive", fields: [executiveId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedByUser       User                  @relation("LoanSubmittedBy", fields: [submittedByUserId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  reviewedByUser        User?                 @relation("LoanReviewedBy", fields: [reviewedByUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  @@index([dealerId], name: "idx_loan_applications_dealer")
  @@index([status], name: "idx_loan_applications_status")
  @@index([submittedByUserId], name: "idx_loan_applications_submitted_by")
  @@index([applicantCuil], name: "idx_loan_applications_cuil")
  @@index([createdAt], name: "idx_loan_applications_created")
  @@map("loan_applications")
}
 
